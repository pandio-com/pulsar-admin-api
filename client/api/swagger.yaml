openapi: 3.0.1
info:
  title: Pulsar Admin REST API
  description: This provides the REST API for admin operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v2
servers:
- url: /admin/v2
tags:
- name: bookies
- name: broker-stats
- name: brokers
- name: clusters
- name: namespaces
- name: non-persistent topic
- name: persistent topic
- name: resource-quotas
- name: schemas
- name: tenants
paths:
  /bookies/racks-info:
    get:
      tags:
      - bookies
      summary: Gets the rack placement information for all the bookies in the cluster
      operationId: getBookiesRackInfo
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/BookieInfo'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /bookies/racks-info/{bookie}:
    get:
      tags:
      - bookies
      summary: Gets the rack placement information for a specific bookie in the cluster
      operationId: getBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieInfo'
        "403":
          description: Don't have admin permission
          content: {}
    post:
      tags:
      - bookies
      summary: Updates the rack placement information for a specific bookie in the
        cluster
      operationId: updateBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: group
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
    delete:
      tags:
      - bookies
      summary: Removed the rack placement information for a specific bookie in the
        cluster
      operationId: deleteBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/allocator-stats/{allocator}:
    get:
      tags:
      - broker-stats
      summary: Get the stats for the Netty allocator. Available allocators are 'default'
        and 'ml-cache'
      operationId: getAllocatorStats
      parameters:
      - name: allocator
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatorStats'
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/bookieops:
    get:
      tags:
      - broker-stats
      summary: Get pending bookie client op stats by namesapce
      operationId: getPendingBookieOpsStats
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PendingBookieOpsStats'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/broker-resource-availability/{tenant}/{namespace}:
    get:
      tags:
      - broker-stats
      summary: Broker availability report
      description: This API gives the current broker availability in percent, each
        resource percentage usage is calculated and thensum of all of the resource
        usage percent is called broker-resource-availability<br/><br/>THIS API IS
        ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM
      operationId: getBrokerResourceAvailability
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ResourceUnit'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "409":
          description: Load-manager doesn't support operation
          content: {}
  /broker-stats/load-report:
    get:
      tags:
      - broker-stats
      summary: Get Load for this broker
      description: consists of topics stats & systemResourceUsage
      operationId: getLoadReport
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadReport'
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/mbeans:
    get:
      tags:
      - broker-stats
      summary: Get all the mbean details of this broker JVM
      operationId: getMBeans
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metrics'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/metrics:
    get:
      tags:
      - broker-stats
      summary: Gets the metrics for Monitoring
      description: Requested should be executed by Monitoring agent on each broker
        to fetch the metrics
      operationId: getMetrics
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metrics'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /broker-stats/topics:
    get:
      tags:
      - broker-stats
      summary: Get all the topic stats by namespace
      operationId: getTopics2
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputStream'
        "403":
          description: Don't have admin permission
          content: {}
  /brokers/configuration:
    get:
      tags:
      - brokers
      summary: Get all updatable dynamic configurations's name
      operationId: getDynamicConfigurationName
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
  /brokers/configuration/runtime:
    get:
      tags:
      - brokers
      summary: Get all runtime configurations. This operation requires Pulsar super-user
        privileges.
      operationId: getRuntimeConfiguration
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /brokers/configuration/values:
    get:
      tags:
      - brokers
      summary: Get value of all dynamic configurations' value overridden on local
        config
      operationId: getAllDynamicConfigurations
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "404":
          description: Configuration not found
          content: {}
        "500":
          description: Internal server error
          content: {}
  /brokers/configuration/{configName}:
    delete:
      tags:
      - brokers
      summary: Delete dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      operationId: deleteDynamicConfiguration
      parameters:
      - name: configName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Service configuration updated successfully
          content: {}
        "403":
          description: You don't have admin permission to update service-configuration
          content: {}
        "412":
          description: Invalid dynamic-config value
          content: {}
        "500":
          description: Internal server error
          content: {}
  /brokers/configuration/{configName}/{configValue}:
    post:
      tags:
      - brokers
      summary: Update dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      operationId: updateDynamicConfiguration
      parameters:
      - name: configName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: configValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Service configuration updated successfully
          content: {}
        "403":
          description: You don't have admin permission to update service-configuration
          content: {}
        "404":
          description: Configuration not found
          content: {}
        "412":
          description: Invalid dynamic-config value
          content: {}
        "500":
          description: Internal server error
          content: {}
  /brokers/health:
    get:
      tags:
      - brokers
      summary: Run a healthcheck against the broker
      operationId: healthcheck
      responses:
        "200":
          description: Everything is OK
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Cluster doesn't exist
          content: {}
        "500":
          description: Internal server error
          content: {}
  /brokers/internal-configuration:
    get:
      tags:
      - brokers
      summary: Get the internal configuration data
      operationId: getInternalConfigurationData
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConfigurationData'
  /brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces:
    get:
      tags:
      - brokers
      summary: Get the list of namespaces served by the specific broker
      operationId: getOwnedNamespaces
      parameters:
      - name: clusterName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: broker-webserviceurl
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceOwnershipStatus'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Cluster doesn't exist
          content: {}
  /brokers/{cluster}:
    get:
      tags:
      - brokers
      summary: Get the list of active brokers (web service addresses) in the cluster.If
        authorization is not enabled, any cluster name is valid.
      operationId: getActiveBrokers
      parameters:
      - name: cluster
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Authentication required
          content: {}
        "403":
          description: This operation requires super-user access
          content: {}
        "404":
          description: 'Cluster does not exist: cluster={clustername}'
          content: {}
  /clusters:
    get:
      tags:
      - clusters
      summary: Get the list of all the Pulsar clusters.
      operationId: getClusters
      responses:
        "200":
          description: Return a list of clusters.
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}:
    get:
      tags:
      - clusters
      summary: Get the configuration for the specified cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Return the cluster data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterData'
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
    put:
      tags:
      - clusters
      summary: Create a new cluster.
      description: This operation requires Pulsar superuser privileges, and the name
        cannot contain the '/' characters.
      operationId: createCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The cluster data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        required: true
      responses:
        "204":
          description: Cluster has been created.
          content: {}
        "403":
          description: You don't have admin permission to create the cluster.
          content: {}
        "409":
          description: Cluster already exists.
          content: {}
        "412":
          description: Cluster name is not valid.
          content: {}
        "500":
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - clusters
      summary: Update the configuration for a cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: updateCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The cluster data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        required: true
      responses:
        "204":
          description: Cluster has been updated.
          content: {}
        "403":
          description: Don't have admin permission or policies are read-only.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete an existing cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Cluster has been deleted.
          content: {}
        "403":
          description: Don't have admin permission or policies are read-only.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "412":
          description: Cluster is not empty.
          content: {}
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}/failureDomains:
    get:
      tags:
      - clusters
      summary: Get the cluster failure domains.
      description: This operation requires Pulsar superuser privileges.
      operationId: getFailureDomains
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/FailureDomain'
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "500":
          description: Internal server error
          content: {}
  /clusters/{cluster}/failureDomains/{domainName}:
    get:
      tags:
      - clusters
      summary: Get a domain in a cluster
      description: This operation requires Pulsar superuser privileges.
      operationId: getDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureDomain'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: FailureDomain doesn't exist
          content: {}
        "412":
          description: Cluster doesn't exist
          content: {}
        "500":
          description: Internal server error
          content: {}
    post:
      tags:
      - clusters
      summary: Set the failure domain of the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: setFailureDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The configuration data of a failure domain
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FailureDomain'
        required: true
      responses:
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Failure domain doesn't exist.
          content: {}
        "409":
          description: Broker already exists in another domain.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete the failure domain of the cluster
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteFailureDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission or policy is read only
          content: {}
        "404":
          description: FailureDomain doesn't exist
          content: {}
        "412":
          description: Cluster doesn't exist
          content: {}
        "500":
          description: Internal server error
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies:
    get:
      tags:
      - clusters
      summary: Get the namespace isolation policies assigned to the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicies
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceIsolationData'
                x-content-type: application/json
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/brokers:
    get:
      tags:
      - clusters
      summary: Get list of brokers with namespace-isolation policies attached to them.
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokersWithNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/BrokerNamespaceIsolationData'
                x-content-type: application/json
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Namespace-isolation policies not found.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/brokers/{broker}:
    get:
      tags:
      - clusters
      summary: Get a broker with namespace-isolation policies attached to it.
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokerWithNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: broker
        in: path
        description: The broker name (<broker-hostname>:<web-service-port>)
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: broker1:8080
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerNamespaceIsolationData'
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Namespace-isolation policies/ Broker not found.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/{policyName}:
    get:
      tags:
      - clusters
      summary: Get the single namespace isolation policy assigned to the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: policyName
        in: path
        description: The name of the namespace isolation policy
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceIsolationData'
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Policy doesn't exist.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
    post:
      tags:
      - clusters
      summary: Set namespace isolation policy.
      description: This operation requires Pulsar superuser privileges.
      operationId: setNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: policyName
        in: path
        description: The namespace isolation policy name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The namespace isolation policy data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamespaceIsolationData'
        required: true
      responses:
        "400":
          description: Namespace isolation policy data is invalid.
          content: {}
        "403":
          description: Don't have admin permission or policies are read-only.
          content: {}
        "404":
          description: Namespace isolation policy doesn't exist.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete namespace isolation policy.
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: policyName
        in: path
        description: The namespace isolation policy name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission or policies are read only.
          content: {}
        "404":
          description: Namespace isolation policy doesn't exist.
          content: {}
        "412":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
  /clusters/{cluster}/peers:
    get:
      tags:
      - clusters
      summary: Get the peer-cluster data for the specified cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getPeerCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
    post:
      tags:
      - clusters
      summary: Update peer-cluster-list for a cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: setPeerClusterNames
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The list of peer cluster names
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "204":
          description: Cluster has been updated.
          content: {}
        "403":
          description: Don't have admin permission or policies are read-only.
          content: {}
        "404":
          description: Cluster doesn't exist.
          content: {}
        "412":
          description: Peer cluster doesn't exist.
          content: {}
        "500":
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{cluster}/antiAffinity/{group}:
    get:
      tags:
      - namespaces
      summary: Get all namespaces that are grouped by given anti-affinity group in
        a given cluster. api can be only accessed by admin of any of the existing
        tenant
      operationId: getAntiAffinityNamespaces
      parameters:
      - name: cluster
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: group
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tenant
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "412":
          description: Cluster not exist/Anti-affinity group can't be empty.
          content: {}
  /namespaces/{property}/{namespace}/persistence/bookieAffinity:
    get:
      tags:
      - namespaces
      summary: Get the bookie-affinity-group from namespace-local policy.
      operationId: getBookieAffinityGroup
      parameters:
      - name: property
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieAffinityGroupData'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    delete:
      tags:
      - namespaces
      summary: Delete the bookie-affinity-group from namespace-local policy.
      operationId: deleteBookieAffinityGroup
      parameters:
      - name: property
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}:
    get:
      tags:
      - namespaces
      summary: Get the list of all the namespaces for a certain tenant.
      operationId: getTenantNamespaces
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}:
    get:
      tags:
      - namespaces
      summary: Get the dump all the policies specified for a namespace.
      operationId: getPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policies'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Creates a new namespace with the specified policies
      operationId: createNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster doesn't exist
          content: {}
        "409":
          description: Namespace already exists
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
    delete:
      tags:
      - namespaces
      summary: Delete a namespace and all the topics under it.
      operationId: deleteNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Namespace is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/antiAffinity:
    get:
      tags:
      - namespaces
      summary: Get anti-affinity group of a namespace.
      operationId: getNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set anti-affinity group for a namespace
      operationId: setNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "412":
          description: Invalid antiAffinityGroup
          content: {}
    delete:
      tags:
      - namespaces
      summary: Remove anti-affinity group of a namespace.
      operationId: removeNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/autoTopicCreation:
    post:
      tags:
      - namespaces
      summary: Override broker's allowAutoTopicCreation setting for a namespace
      operationId: setAutoTopicCreation
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid autoTopicCreation override
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    delete:
      tags:
      - namespaces
      summary: Remove override of broker's allowAutoTopicCreation in a namespace
      operationId: removeAutoTopicCreation
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/backlogQuota:
    post:
      tags:
      - namespaces
      summary: ' Set a backlog quota for all the topics on a namespace.'
      operationId: setBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - destination_storage
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
          content: {}
    delete:
      tags:
      - namespaces
      summary: Remove a backlog quota policy from a namespace.
      operationId: removeBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - destination_storage
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/backlogQuotaMap:
    get:
      tags:
      - namespaces
      summary: Get backlog quota map on a namespace.
      operationId: getBacklogQuotaMap
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/bundles:
    get:
      tags:
      - namespaces
      summary: Get the bundles split data.
      operationId: getBundlesData
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundlesData'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "412":
          description: Namespace is not setup to split in bundles
          content: {}
  /namespaces/{tenant}/{namespace}/clearBacklog:
    post:
      tags:
      - namespaces
      summary: Clear backlog for all topics on a namespace.
      operationId: clearNamespaceBacklog
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/clearBacklog/{subscription}:
    post:
      tags:
      - namespaces
      summary: Clear backlog for a given subscription on all topics on a namespace.
      operationId: clearNamespaceBacklogForSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/compactionThreshold:
    get:
      tags:
      - namespaces
      summary: Maximum number of uncompacted bytes in topics before compaction is
        triggered.
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: getCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: setCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: compactionThreshold value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/deduplication:
    post:
      tags:
      - namespaces
      summary: Enable or disable broker side deduplication for all topics in a namespace
      operationId: modifyDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/delayedDelivery:
    get:
      tags:
      - namespaces
      summary: Get delayed delivery messages config on a namespace.
      operationId: getDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelayedDeliveryPolicies'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Set delayed delivery messages config on a namespace.
      operationId: setDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/dispatchRate:
    get:
      tags:
      - namespaces
      summary: Get dispatch-rate configured for the namespace, -1 represents not configured
        yet
      operationId: getDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set dispatch-rate throttling for all topics of the namespace
      operationId: setDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/encryptionRequired:
    post:
      tags:
      - namespaces
      summary: Message encryption is required or not for all topics in a namespace
      operationId: modifyEncryptionRequired
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/isAllowAutoUpdateSchema:
    get:
      tags:
      - namespaces
      summary: The flag of whether allow auto update schema
      operationId: getIsAllowAutoUpdateSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Update flag of whether allow auto update schema
      operationId: setIsAllowAutoUpdateSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/maxConsumersPerSubscription:
    get:
      tags:
      - namespaces
      summary: Get maxConsumersPerSubscription config on a namespace.
      operationId: getMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      operationId: setMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: maxConsumersPerSubscription value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/maxConsumersPerTopic:
    get:
      tags:
      - namespaces
      summary: Get maxConsumersPerTopic config on a namespace.
      operationId: getMaxConsumersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      operationId: setMaxConsumersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: maxConsumersPerTopic value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/maxProducersPerTopic:
    get:
      tags:
      - namespaces
      summary: Get maxProducersPerTopic config on a namespace.
      operationId: getMaxProducersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxProducersPerTopic configuration on a namespace.'
      operationId: setMaxProducersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: maxProducersPerTopic value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/messageTTL:
    get:
      tags:
      - namespaces
      summary: Get the message TTL for the namespace
      operationId: getNamespaceMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set message TTL in seconds for namespace
      operationId: setNamespaceMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "412":
          description: Invalid TTL
          content: {}
  /namespaces/{tenant}/{namespace}/offloadDeletionLagMs:
    get:
      tags:
      - namespaces
      summary: Number of milliseconds to wait before deleting a ledger segment which
        has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      description: A negative value denotes that deletion has been completely disabled.
        'null' denotes that the topics in the namespace will fall back to the broker
        default for deletion lag.
      operationId: getOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set number of milliseconds to wait before deleting a ledger segment
        which has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      description: A negative value disables the deletion completely.
      operationId: setOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: offloadDeletionLagMs value is not valid
          content: {}
    delete:
      tags:
      - namespaces
      summary: Clear the namespace configured offload deletion lag. The topics in
        the namespace will fallback to using the default configured deletion lag for
        the broker
      operationId: clearOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/offloadPolicies:
    get:
      tags:
      - namespaces
      summary: Get offload configuration on a namespace.
      operationId: getOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadPolicies'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set offload configuration on a namespace.'
      operationId: setOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/offloadThreshold:
    get:
      tags:
      - namespaces
      summary: Maximum number of bytes stored on the pulsar cluster for a topic, before
        the broker will start offloading to longterm storage
      description: A negative value disables automatic offloading
      operationId: getOffloadThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set maximum number of bytes stored on the pulsar cluster for a topic,
        before the broker will start offloading to longterm storage
      description: '-1 will revert to using the cluster default. A negative value
        disables automatic offloading. '
      operationId: setOffloadThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: offloadThreshold value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/permissions:
    get:
      tags:
      - namespaces
      summary: Retrieve the permissions for a namespace.
      operationId: getPermissions
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Namespace is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/permissions/{role}:
    post:
      tags:
      - namespaces
      summary: Grant a new permission to a role on a namespace.
      operationId: grantPermissionOnNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "501":
          description: Authorization is not enabled
          content: {}
    delete:
      tags:
      - namespaces
      summary: Revoke all permissions to a role on a namespace.
      operationId: revokePermissionsOnNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/persistence:
    get:
      tags:
      - namespaces
      summary: Get the persistence configuration for a namespace.
      operationId: getPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistencePolicies'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Set the persistence configuration for all the topics on a namespace.
      operationId: setPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid persistence policies
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/persistence/bookieAffinity:
    post:
      tags:
      - namespaces
      summary: Set the bookie-affinity-group to namespace-persistent policy.
      operationId: setBookieAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/replication:
    get:
      tags:
      - namespaces
      summary: Get the replication clusters for a namespace.
      operationId: getNamespaceReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "412":
          description: Namespace is not global
          content: {}
    post:
      tags:
      - namespaces
      summary: Set the replication clusters for a namespace.
      operationId: setNamespaceReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Peer-cluster can't be part of replication-cluster
          content: {}
        "412":
          description: Namespace is not global or invalid cluster ids
          content: {}
  /namespaces/{tenant}/{namespace}/replicatorDispatchRate:
    get:
      tags:
      - namespaces
      summary: Get replicator dispatch-rate configured for the namespace, -1 represents
        not configured yet
      operationId: getReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set replicator dispatch-rate throttling for all topics of the namespace
      operationId: setReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/retention:
    get:
      tags:
      - namespaces
      summary: Get retention config on a namespace.
      operationId: getRetention
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicies'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set retention configuration on a namespace.'
      operationId: setRetention
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Retention Quota must exceed backlog quota
          content: {}
  /namespaces/{tenant}/{namespace}/schemaAutoUpdateCompatibilityStrategy:
    get:
      tags:
      - namespaces
      summary: The strategy used to check the compatibility of new schemas, provided
        by producers, before automatically updating the schema
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: getSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                enum:
                - AutoUpdateDisabled
                - Backward
                - Forward
                - Full
                - AlwaysCompatible
                - BackwardTransitive
                - ForwardTransitive
                - FullTransitive
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    put:
      tags:
      - namespaces
      summary: Update the strategy used to check the compatibility of new schemas,
        provided by producers, before automatically updating the schema
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: setSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/schemaCompatibilityStrategy:
    get:
      tags:
      - namespaces
      summary: 'The strategy of the namespace schema compatibility '
      operationId: getSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                enum:
                - UNDEFINED
                - ALWAYS_INCOMPATIBLE
                - ALWAYS_COMPATIBLE
                - BACKWARD
                - FORWARD
                - FULL
                - BACKWARD_TRANSITIVE
                - FORWARD_TRANSITIVE
                - FULL_TRANSITIVE
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    put:
      tags:
      - namespaces
      summary: Update the strategy used to check the compatibility of new schema
      operationId: setSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/schemaValidationEnforced:
    get:
      tags:
      - namespaces
      summary: Get schema validation enforced flag for namespace.
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: getSchemaValidtionEnforced
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set schema validation enforced flag on namespace.
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: setSchemaValidtionEnforced
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or Namespace doesn't exist
          content: {}
        "412":
          description: schemaValidationEnforced value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/subscribeRate:
    get:
      tags:
      - namespaces
      summary: Get subscribe-rate configured for the namespace
      operationId: getSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeRate'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set subscribe-rate throttling for all topics of the namespace
      operationId: setSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/subscriptionAuthMode:
    post:
      tags:
      - namespaces
      summary: ' Set a subscription auth mode for all the topics on a namespace.'
      operationId: setSubscriptionAuthMode
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/subscriptionDispatchRate:
    get:
      tags:
      - namespaces
      summary: Get Subscription dispatch-rate configured for the namespace, -1 represents
        not configured yet
      operationId: getSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set Subscription dispatch-rate throttling for all topics of the namespace
      operationId: setSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/topics:
    get:
      tags:
      - namespaces
      summary: Get the list of all the topics under a certain namespace.
      operationId: getTopics
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mode
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: PERSISTENT
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          - ALL
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/unload:
    put:
      tags:
      - namespaces
      summary: Unload namespace
      description: Unload an active namespace from the current broker serving it.
        Performing this operation will let the brokerremoves all producers, consumers,
        and connections using this namespace, and close all topics (includingtheir
        persistent store). During that operation, the namespace is marked as tentatively
        unavailable until thebroker completes the unloading action. This operation
        requires strictly super user privileges, since it wouldresult in non-persistent
        message loss and unexpected connection closure to the clients.
      operationId: unloadNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or namespace doesn't exist
          content: {}
        "412":
          description: Namespace is already unloaded or Namespace has bundles activated
          content: {}
  /namespaces/{tenant}/{namespace}/unsubscribe/{subscription}:
    post:
      tags:
      - namespaces
      summary: Unsubscribes the given subscription on all topics on a namespace.
      operationId: unsubscribeNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}:
    delete:
      tags:
      - namespaces
      summary: Delete a namespace bundle and all the topics under it.
      operationId: deleteNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        "409":
          description: Namespace bundle is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog:
    post:
      tags:
      - namespaces
      summary: Clear backlog for all topics on a namespace bundle.
      operationId: clearNamespaceBundleBacklog
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog/{subscription}:
    post:
      tags:
      - namespaces
      summary: Clear backlog for a given subscription on all topics on a namespace
        bundle.
      operationId: clearNamespaceBundleBacklogForSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/split:
    put:
      tags:
      - namespaces
      summary: Split a namespace bundle
      operationId: splitNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: unload
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: splitAlgorithmName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/unload:
    put:
      tags:
      - namespaces
      summary: Unload a namespace bundle
      operationId: unloadNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/unsubscribe/{subscription}:
    post:
      tags:
      - namespaces
      summary: Unsubscribes the given subscription on all topics on a namespace bundle.
      operationId: unsubscribeNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
  /non-persistent/{tenant}/{namespace}:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of non-persistent topics under a namespace.
      operationId: getList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace does not exist
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/partitioned:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of partitioned topics under a namespace.
      operationId: getPartitionedTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{bundle}:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of non-persistent topics under a namespace bundle.
      operationId: getListFromBundle
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        description: Bundle range of a topic
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace doesn't exist
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}:
    put:
      tags:
      - non-persistent topic
      summary: Create a non-partitioned topic.
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "409":
          description: Partitioned topic already exist
          content: {}
        "412":
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    delete:
      tags:
      - non-persistent topic
      summary: Delete a topic.
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic has active producers/subscriptions
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - non-persistent topic
      summary: Expiry messages on all subscriptions of topic.
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        "412":
          description: Can't find owner for topic
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      tags:
      - non-persistent topic
      summary: Get estimated backlog for offline topic.
      operationId: getBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
        "404":
          description: Namespace does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      tags:
      - non-persistent topic
      summary: Get the status of a compaction operation for a topic.
      operationId: compactionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist, or compaction hasn't run
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Trigger a compaction operation on a topic.
      operationId: compact
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "409":
          description: Compaction already running
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      tags:
      - non-persistent topic
      summary: Create missed partitions of an existing partitioned topic.
      operationId: createMissedPartitions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: Partitioned topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      tags:
      - non-persistent topic
      summary: Get the internal stats for the topic.
      operationId: getManagedLedgerInfo
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      tags:
      - non-persistent topic
      summary: Get the internal stats for the topic.
      operationId: getInternalStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace/topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      tags:
      - non-persistent topic
      summary: Return the last commit message id of topic
      operationId: getLastMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      tags:
      - non-persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: offloadStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: triggerOffload
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "409":
          description: Offload already running
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      tags:
      - non-persistent topic
      summary: Get the stats for the partitioned topic.
      operationId: getPartitionedStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: perPartition
        in: query
        description: Get per partition stats
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: Is return precise backlog or imprecise backlog
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/partitions:
    get:
      tags:
      - non-persistent topic
      summary: Get partitioned topic metadata.
      operationId: getPartitionedMetadata
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: checkAllowAutoCreation
        in: query
        description: Is check configuration required to automatically create topic
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace/topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Create a partitioned topic.
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace does not exist
          content: {}
        "409":
          description: Partitioned topic already exists
          content: {}
        "412":
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - non-persistent topic
      summary: Increment partitions of an existing partitioned topic.
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: updateLocalTopicOnly
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        "401":
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "406":
          description: The number of partitions should be more than 0
          content: {}
        "409":
          description: Partitioned topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete a partitioned topic.
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Partitioned topic does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      tags:
      - non-persistent topic
      summary: Get permissions on a topic.
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    post:
      tags:
      - non-persistent topic
      summary: Grant a new permission to a role on a single topic.
      operationId: grantPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Actions to be granted (produce,functions,consume)
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Revoke permissions on a topic.
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Permissions are not set at the topic level
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      tags:
      - non-persistent topic
      summary: Get the stats for the topic.
      operationId: getStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: Is return precise backlog or imprecise backlog
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonPersistentTopicStats'
        "401":
          description: Don't have permission to manage resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace/topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      tags:
      - non-persistent topic
      summary: Delete a subscription.
      description: There should not be any active consumers on the subscription.
      operationId: deleteSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Subscription has active consumers
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - non-persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expireTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      tags:
      - non-persistent topic
      summary: Peek nth message on a topic subscription.
      operationId: peekNthMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscribed message expired
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: messagePosition
        in: path
        description: The number of messages (default 1)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic, subscription or the message position does not exist
          content: {}
        "405":
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      tags:
      - non-persistent topic
      summary: Reset subscription to message position closest to given position.
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Not supported for partitioned topics
          content: {}
        "412":
          description: Unable to find position for position specified
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      tags:
      - non-persistent topic
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: timestamp
        in: path
        description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Method Not Allowed
          content: {}
        "412":
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      tags:
      - non-persistent topic
      summary: Skipping messages on a topic subscription.
      operationId: skipMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: numMessages
        in: path
        description: The number of messages to skip
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Skipping messages on a partitioned topic is not allowed
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      tags:
      - non-persistent topic
      summary: Skip all messages on a topic subscription.
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Operation not allowed on non-persistent topic
          content: {}
        "412":
          description: Can't find owner for topic
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      tags:
      - non-persistent topic
      summary: Create a subscription on the topic.
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscriptionName
        in: path
        description: Subscription to create position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: replicated
        in: query
        description: Is replicated required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Not supported for partitioned topics
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of persistent subscriptions for a given topic.
      operationId: getSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      tags:
      - non-persistent topic
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      operationId: terminate
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Termination of a partitioned topic is not allowed
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      tags:
      - non-persistent topic
      summary: Unload a topic
      operationId: unloadTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: This operation requires super-user access
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: The tenant/namespace/topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}:
    get:
      tags:
      - persistent topic
      summary: Get the list of topics under a namespace.
      operationId: getList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/partitioned:
    get:
      tags:
      - persistent topic
      summary: Get the list of partitioned topics under a namespace.
      operationId: getPartitionedTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Namespace name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}:
    put:
      tags:
      - persistent topic
      summary: Create a non-partitioned topic.
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "409":
          description: Partitioned topic already exist
          content: {}
        "412":
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    delete:
      tags:
      - persistent topic
      summary: Delete a topic.
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic has active producers/subscriptions
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - persistent topic
      summary: Expiry messages on all subscriptions of topic.
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        "412":
          description: Can't find owner for topic
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      tags:
      - persistent topic
      summary: Get estimated backlog for offline topic.
      operationId: getBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
        "404":
          description: Namespace does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      tags:
      - persistent topic
      summary: Get the status of a compaction operation for a topic.
      operationId: compactionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist, or compaction hasn't run
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - persistent topic
      summary: Trigger a compaction operation on a topic.
      operationId: compact
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "409":
          description: Compaction already running
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      tags:
      - persistent topic
      summary: Create missed partitions of an existing partitioned topic.
      operationId: createMissedPartitions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: Partitioned topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      tags:
      - persistent topic
      summary: Get the internal stats for the topic.
      operationId: getManagedLedgerInfo
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      tags:
      - persistent topic
      summary: Get the internal stats for the topic.
      operationId: getInternalStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      tags:
      - persistent topic
      summary: Return the last commit message id of topic
      operationId: getLastMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      tags:
      - persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: offloadStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: triggerOffload
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Operation is not allowed on the persistent topic
          content: {}
        "409":
          description: Offload already running
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      tags:
      - persistent topic
      summary: Get the stats for the partitioned topic.
      operationId: getPartitionedStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: perPartition
        in: query
        description: Get per partition stats
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: Is return precise backlog or imprecise backlog
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/partitions:
    get:
      tags:
      - persistent topic
      summary: Get partitioned topic metadata.
      operationId: getPartitionedMetadata
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: checkAllowAutoCreation
        in: query
        description: Is check configuration required to automatically create topic
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
    put:
      tags:
      - persistent topic
      summary: Create a partitioned topic.
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: Partitioned topic already exist
          content: {}
        "412":
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - persistent topic
      summary: Increment partitions of an existing partitioned topic.
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: updateLocalTopicOnly
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        "401":
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "406":
          description: The number of partitions should be more than 0
          content: {}
        "409":
          description: Partitioned topic does not exist
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete a partitioned topic.
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Partitioned topic does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Partitioned topic name is invalid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      tags:
      - persistent topic
      summary: Get permissions on a topic.
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
                  example: {}
                x-content-type: application/json
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    post:
      tags:
      - persistent topic
      summary: Grant a new permission to a role on a single topic.
      operationId: grantPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Actions to be granted (produce,functions,consume)
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Revoke permissions on a topic.
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: tenant/namespace/topic doesn't exit
          content: {}
        "412":
          description: Permissions are not set at the topic level
          content: {}
        "500":
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      tags:
      - persistent topic
      summary: Get the stats for the topic.
      operationId: getStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: Is return precise backlog or imprecise backlog
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      tags:
      - persistent topic
      summary: Delete a subscription.
      description: There should not be any active consumers on the subscription.
      operationId: deleteSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Subscription has active consumers
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expireTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      tags:
      - persistent topic
      summary: Peek nth message on a topic subscription.
      operationId: peekNthMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscribed message expired
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: messagePosition
        in: path
        description: The number of messages (default 1)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic, subscription or the message position does not exist
          content: {}
        "405":
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      tags:
      - persistent topic
      summary: Reset subscription to message position closest to given position.
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Not supported for partitioned topics
          content: {}
        "412":
          description: Unable to find position for position specified
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      tags:
      - persistent topic
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: timestamp
        in: path
        description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Method Not Allowed
          content: {}
        "412":
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      tags:
      - persistent topic
      summary: Skipping messages on a topic subscription.
      operationId: skipMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: numMessages
        in: path
        description: The number of messages to skip
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Skipping messages on a partitioned topic is not allowed
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      tags:
      - persistent topic
      summary: Skip all messages on a topic subscription.
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic or subscription does not exist
          content: {}
        "405":
          description: Operation not allowed on non-persistent topic
          content: {}
        "412":
          description: Can't find owner for topic
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      tags:
      - persistent topic
      summary: Create a subscription on the topic.
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subscriptionName
        in: path
        description: Subscription to create position on
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: replicated
        in: query
        description: Is replicated required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        required: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic/Subscription does not exist
          content: {}
        "405":
          description: Not supported for partitioned topics
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      tags:
      - persistent topic
      summary: Get the list of persistent subscriptions for a given topic.
      operationId: getSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      tags:
      - persistent topic
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      operationId: terminate
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
        "401":
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "405":
          description: Termination of a partitioned topic is not allowed
          content: {}
        "412":
          description: Topic name is not valid
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      tags:
      - persistent topic
      summary: Unload a topic
      operationId: unloadTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        description: Is authentication required to perform this operation
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "401":
          description: Don't have permission to administrate resources on this tenant
          content: {}
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Topic does not exist
          content: {}
        "409":
          description: Concurrent modification
          content: {}
        "412":
          description: Topic name is not valid or can't find owner for topic
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Failed to validate global cluster configuration
          content: {}
  /resource-quotas:
    get:
      tags:
      - resource-quotas
      summary: Get the default quota
      operationId: getDefaultResourceQuota
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
    post:
      tags:
      - resource-quotas
      summary: Set the default quota
      operationId: setDefaultResourceQuota
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: Don't have admin permission
          content: {}
  /resource-quotas/{tenant}/{namespace}/{bundle}:
    get:
      tags:
      - resource-quotas
      summary: Get resource quota of a namespace bundle.
      operationId: getNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
        "403":
          description: Don't have admin permission
          content: {}
        "404":
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - resource-quotas
      summary: Set resource quota on a namespace.
      operationId: setNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "409":
          description: Concurrent modification
          content: {}
    delete:
      tags:
      - resource-quotas
      summary: Remove resource quota for a namespace.
      operationId: removeNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: Don't have admin permission
          content: {}
        "409":
          description: Concurrent modification
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/compatibility:
    post:
      tags:
      - schemas
      summary: test the schema compatibility
      operationId: testCompatibility
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsCompatibilityResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "500":
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema:
    get:
      tags:
      - schemas
      summary: Get the schema of a topic
      operationId: getSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "500":
          description: Internal Server Error
          content: {}
    post:
      tags:
      - schemas
      summary: Update the schema of a topic
      operationId: postSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchemaResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        "409":
          description: Incompatible schema
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "422":
          description: Invalid schema data
          content: {}
        "500":
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - schemas
      summary: Delete the schema of a topic
      operationId: deleteSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSchemaResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "500":
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/schema/{version}:
    get:
      tags:
      - schemas
      summary: Get the schema of a topic at a given version
      operationId: getSchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "500":
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/schemas:
    get:
      tags:
      - schemas
      summary: Get the all schemas of a topic
      operationId: getAllSchemas
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVersionsSchemaResponse'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "500":
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/version:
    post:
      tags:
      - schemas
      summary: get the version of the schema
      operationId: getVersionBySchema
      parameters:
      - name: tenant
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topic
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authoritative
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongSchemaVersion'
        "307":
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        "401":
          description: Client is not authorized or Don't have admin permission
          content: {}
        "403":
          description: Client is not authenticated
          content: {}
        "404":
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        "412":
          description: Failed to find the ownership for the topic
          content: {}
        "422":
          description: Invalid schema data
          content: {}
        "500":
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
  /tenants:
    get:
      tags:
      - tenants
      summary: Get the list of existing tenants.
      operationId: getTenants
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "403":
          description: The requester doesn't have admin permissions
          content: {}
        "404":
          description: Tenant doesn't exist
          content: {}
  /tenants/{tenant}:
    get:
      tags:
      - tenants
      summary: Get the admin configuration for a given tenant.
      operationId: getTenantAdmin
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
        "403":
          description: The requester doesn't have admin permissions
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
    put:
      tags:
      - tenants
      summary: Create a new tenant.
      description: This operation requires Pulsar super-user privileges.
      operationId: createTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: TenantInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        required: false
      responses:
        "403":
          description: The requester doesn't have admin permissions
          content: {}
        "409":
          description: Tenant already exists
          content: {}
        "412":
          description: Clusters do not exist
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - tenants
      summary: Update the admins for a tenant.
      description: This operation requires Pulsar super-user privileges.
      operationId: updateTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: TenantInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        required: false
      responses:
        "403":
          description: The requester doesn't have admin permissions
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: Tenant already exists
          content: {}
        "412":
          description: Clusters do not exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - tenants
      summary: Delete a tenant and all namespaces and topics under it.
      operationId: deleteTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "403":
          description: The requester doesn't have admin permissions
          content: {}
        "404":
          description: Tenant does not exist
          content: {}
        "409":
          description: The tenant still has active namespaces
          content: {}
components:
  schemas:
    AllocatorStats:
      type: object
      properties:
        numDirectArenas:
          type: integer
          format: int32
        numHeapArenas:
          type: integer
          format: int32
        numThreadLocalCaches:
          type: integer
          format: int32
        normalCacheSize:
          type: integer
          format: int32
        smallCacheSize:
          type: integer
          format: int32
        tinyCacheSize:
          type: integer
          format: int32
        directArenas:
          type: array
          items:
            $ref: '#/components/schemas/PoolArenaStats'
        heapArenas:
          type: array
          items:
            $ref: '#/components/schemas/PoolArenaStats'
      example:
        numDirectArenas: 0
        normalCacheSize: 5
        smallCacheSize: 5
        numThreadLocalCaches: 1
        tinyCacheSize: 2
        heapArenas:
        - null
        - null
        directArenas:
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - null
          - null
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - null
          - null
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        numHeapArenas: 6
    AuthPolicies:
      type: object
      properties:
        namespace_auth:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
              - produce
              - consume
              - functions
        destination_auth:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
        subscription_auth_roles:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
      example:
        subscription_auth_roles:
          key:
          - subscription_auth_roles
          - subscription_auth_roles
        namespace_auth:
          key:
          - produce
          - produce
        destination_auth:
          key:
            key:
            - produce
            - produce
    AutoFailoverPolicyData:
      type: object
      properties:
        policy_type:
          type: string
          description: The auto failover policy type
          enum:
          - min_available
        parameters:
          type: object
          additionalProperties:
            type: string
          description: |
            The parameters applied to the auto failover policy specified by `policy_type`.
            The parameters for 'min_available' are :
              - 'min_limit': the limit of minimal number of available brokers in primary group before auto failover
              - 'usage_threshold': the resource usage threshold. If the usage of a broker is beyond this value, it would be marked as unavailable
          example: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
      description: The auto failover policy configuration data
      example:
        policy_type: min_available
        parameters: |
          {
            "min_limit": 3,
            "usage_threshold": 80
          }
    AutoTopicCreationOverride:
      type: object
      properties:
        allowAutoTopicCreation:
          type: boolean
        topicType:
          type: string
        defaultNumPartitions:
          type: integer
          format: int32
      example:
        defaultNumPartitions: 7
        allowAutoTopicCreation: true
        topicType: topicType
    BacklogQuota:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        policy:
          type: string
          enum:
          - producer_request_hold
          - producer_exception
          - consumer_backlog_eviction
      example:
        limit: 6
        policy: producer_request_hold
    BookieAffinityGroupData:
      type: object
      properties:
        bookkeeperAffinityGroupPrimary:
          type: string
        bookkeeperAffinityGroupSecondary:
          type: string
      example:
        bookkeeperAffinityGroupSecondary: bookkeeperAffinityGroupSecondary
        bookkeeperAffinityGroupPrimary: bookkeeperAffinityGroupPrimary
    BookieInfo:
      type: object
      properties:
        rack:
          type: string
        hostname:
          type: string
      example:
        rack: rack
        hostname: hostname
    BrokerNamespaceIsolationData:
      type: object
      properties:
        brokerName:
          type: string
          description: The broker name
          example: broker1:8080
        policyName:
          type: string
          description: Policy name
          example: my-policy
        isPrimary:
          type: boolean
          description: Is Primary broker
          example: false
        namespaceRegex:
          type: array
          description: The namespace-isolation policies attached to this broker
          items:
            type: string
      description: The namespace isolation data for a given broker
      example:
        policyName: my-policy
        isPrimary: false
        namespaceRegex:
        - namespaceRegex
        - namespaceRegex
        brokerName: broker1:8080
    BundlesData:
      type: object
      properties:
        boundaries:
          type: array
          items:
            type: string
        numBundles:
          type: integer
          format: int32
      example:
        boundaries:
        - boundaries
        - boundaries
        numBundles: 0
    ClusterData:
      type: object
      properties:
        serviceUrl:
          type: string
          description: The HTTP rest service URL (for admin operations)
          example: http://pulsar.example.com:8080
        serviceUrlTls:
          type: string
          description: The HTTPS rest service URL (for admin operations)
          example: https://pulsar.example.com:8443
        brokerServiceUrl:
          type: string
          description: The broker service url (for produce and consume operations)
          example: pulsar://pulsar.example.com:6650
        brokerServiceUrlTls:
          type: string
          description: The secured broker service url (for produce and consume operations)
          example: pulsar+ssl://pulsar.example.com:6651
        peerClusterNames:
          uniqueItems: true
          type: array
          description: A set of peer cluster names
          items:
            type: string
      description: The configuration data for a cluster
      example:
        serviceUrlTls: https://pulsar.example.com:8443
        peerClusterNames:
        - peerClusterNames
        - peerClusterNames
        serviceUrl: http://pulsar.example.com:8080
        brokerServiceUrlTls: pulsar+ssl://pulsar.example.com:6651
        brokerServiceUrl: pulsar://pulsar.example.com:6650
    ConsumerStats:
      type: object
      properties:
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        bytesOutCounter:
          type: integer
          format: int64
        msgOutCounter:
          type: integer
          format: int64
        msgRateRedeliver:
          type: number
          format: double
        consumerName:
          type: string
        availablePermits:
          type: integer
          format: int32
        unackedMessages:
          type: integer
          format: int32
        blockedConsumerOnUnackedMsgs:
          type: boolean
        lastAckedTimestamp:
          type: integer
          format: int64
        lastConsumedTimestamp:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
        address:
          type: string
        connectedSince:
          type: string
        clientVersion:
          type: string
      example:
        metadata:
          key: metadata
        address: address
        msgRateRedeliver: 3.353193347011243
        msgOutCounter: 6
        clientVersion: clientVersion
        msgThroughputOut: 6.878052220127876
        availablePermits: 3
        bytesOutCounter: 5
        connectedSince: connectedSince
        blockedConsumerOnUnackedMsgs: true
        lastAckedTimestamp: 0
        unackedMessages: 7
        msgRateOut: 6.778324963048013
        consumerName: consumerName
        lastConsumedTimestamp: 7
    CursorDetails:
      type: object
      properties:
        cursorBacklog:
          type: integer
          format: int64
        cursorLedgerId:
          type: integer
          format: int64
      example:
        cursorLedgerId: 3
        cursorBacklog: 9
    CursorStats:
      type: object
      properties:
        markDeletePosition:
          type: string
        readPosition:
          type: string
        waitingReadOp:
          type: boolean
        pendingReadOps:
          type: integer
          format: int32
        messagesConsumedCounter:
          type: integer
          format: int64
        cursorLedger:
          type: integer
          format: int64
        cursorLedgerLastEntry:
          type: integer
          format: int64
        individuallyDeletedMessages:
          type: string
        lastLedgerSwitchTimestamp:
          type: string
        state:
          type: string
        numberOfEntriesSinceFirstNotAckedMessage:
          type: integer
          format: int64
        totalNonContiguousDeletedMessagesRange:
          type: integer
          format: int32
        properties:
          type: object
          additionalProperties:
            type: integer
            format: int64
      example:
        numberOfEntriesSinceFirstNotAckedMessage: 1
        markDeletePosition: markDeletePosition
        cursorLedgerLastEntry: 1
        pendingReadOps: 4
        totalNonContiguousDeletedMessagesRange: 6
        lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
        readPosition: readPosition
        individuallyDeletedMessages: individuallyDeletedMessages
        waitingReadOp: true
        messagesConsumedCounter: 7
        state: state
        cursorLedger: 1
        properties:
          key: 7
    DelayedDeliveryPolicies:
      type: object
      properties:
        tickTime:
          type: integer
          format: int64
        active:
          type: boolean
      example:
        tickTime: 4
        active: true
    DeleteSchemaResponse:
      type: object
      properties:
        version:
          type: integer
          format: int64
      example:
        version: 0
    DispatchRate:
      type: object
      properties:
        dispatchThrottlingRateInMsg:
          type: integer
          format: int32
        dispatchThrottlingRateInByte:
          type: integer
          format: int64
        relativeToPublishRate:
          type: boolean
        ratePeriodInSecond:
          type: integer
          format: int32
      example:
        dispatchThrottlingRateInMsg: 1
        relativeToPublishRate: true
        ratePeriodInSecond: 5
        dispatchThrottlingRateInByte: 5
    FailureDomain:
      type: object
      properties:
        brokers:
          uniqueItems: true
          type: array
          description: The collection of brokers in the same failure domain
          example: '[ ''broker-1'', ''broker-2'' ]'
          items:
            type: string
      description: The data of a failure domain configuration in a cluster
      example:
        brokers: '[ ''broker-1'', ''broker-2'' ]'
    GetAllVersionsSchemaResponse:
      type: object
      properties:
        getSchemaResponses:
          type: array
          items:
            $ref: '#/components/schemas/GetSchemaResponse'
      example:
        getSchemaResponses:
        - data: data
          type: NONE
          version: 0
          properties:
            key: properties
          timestamp: 6
        - data: data
          type: NONE
          version: 0
          properties:
            key: properties
          timestamp: 6
    GetSchemaResponse:
      type: object
      properties:
        version:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - NONE
          - STRING
          - JSON
          - PROTOBUF
          - AVRO
          - BOOLEAN
          - INT8
          - INT16
          - INT32
          - INT64
          - FLOAT
          - DOUBLE
          - DATE
          - TIME
          - TIMESTAMP
          - KEY_VALUE
          - BYTES
          - AUTO
          - AUTO_CONSUME
          - AUTO_PUBLISH
        timestamp:
          type: integer
          format: int64
        data:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
      example:
        data: data
        type: NONE
        version: 0
        properties:
          key: properties
        timestamp: 6
    InternalConfigurationData:
      type: object
      properties:
        zookeeperServers:
          type: string
        configurationStoreServers:
          type: string
        ledgersRootPath:
          type: string
        stateStorageServiceUrl:
          type: string
      example:
        stateStorageServiceUrl: stateStorageServiceUrl
        zookeeperServers: zookeeperServers
        ledgersRootPath: ledgersRootPath
        configurationStoreServers: configurationStoreServers
    IsCompatibilityResponse:
      type: object
      properties:
        schemaCompatibilityStrategy:
          type: string
        compatibility:
          type: boolean
      example:
        schemaCompatibilityStrategy: schemaCompatibilityStrategy
        compatibility: true
    LedgerDetails:
      type: object
      properties:
        entries:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        ledgerId:
          type: integer
          format: int64
      example:
        ledgerId: 7
        entries: 5
        size: 2
        timestamp: 5
    LedgerInfo:
      type: object
      properties:
        ledgerId:
          type: integer
          format: int64
        entries:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        offloaded:
          type: boolean
      example:
        ledgerId: 9
        offloaded: true
        entries: 3
        size: 2
    LoadReport:
      type: object
      properties:
        name:
          type: string
        brokerVersionString:
          type: string
        webServiceUrl:
          type: string
        webServiceUrlTls:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarServiceUrlTls:
          type: string
        persistentTopicsEnabled:
          type: boolean
        nonPersistentTopicsEnabled:
          type: boolean
        timestamp:
          type: integer
          format: int64
        msgRateIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        numTopics:
          type: integer
          format: int32
        numConsumers:
          type: integer
          format: int32
        numProducers:
          type: integer
          format: int32
        numBundles:
          type: integer
          format: int32
        protocols:
          type: object
          additionalProperties:
            type: string
        systemResourceUsage:
          $ref: '#/components/schemas/SystemResourceUsage'
        bundleStats:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NamespaceBundleStats'
        bundleGains:
          uniqueItems: true
          type: array
          items:
            type: string
        bundleLosses:
          uniqueItems: true
          type: array
          items:
            type: string
        allocatedCPU:
          type: number
          format: double
        allocatedMemory:
          type: number
          format: double
        allocatedBandwidthIn:
          type: number
          format: double
        allocatedBandwidthOut:
          type: number
          format: double
        allocatedMsgRateIn:
          type: number
          format: double
        allocatedMsgRateOut:
          type: number
          format: double
        preAllocatedCPU:
          type: number
          format: double
        preAllocatedMemory:
          type: number
          format: double
        preAllocatedBandwidthIn:
          type: number
          format: double
        preAllocatedBandwidthOut:
          type: number
          format: double
        preAllocatedMsgRateIn:
          type: number
          format: double
        preAllocatedMsgRateOut:
          type: number
          format: double
        underLoaded:
          type: boolean
        overLoaded:
          type: boolean
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
        lastUpdate:
          type: integer
          format: int64
        msgThroughputIn:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        loadReportType:
          type: string
      example:
        bundleStats:
          key:
            msgRateIn: 9.301444243932576
            cacheSize: 1
            consumerCount: 7
            topics: 1
            producerCount: 1
            msgThroughputIn: 3.616076749251911
            msgThroughputOut: 4.145608029883936
            msgRateOut: 2.027123023002322
        preAllocatedMsgRateIn: 6.438423552598547
        allocatedMsgRateOut: 9.965781217890562
        overLoaded: true
        preAllocatedBandwidthIn: 8.762042012749001
        preAllocatedBandwidthOut: 9.018348186070783
        preAllocatedMemory: 6.683562403749608
        numTopics: 5
        allocatedCPU: 6.84685269835264
        bundleLosses:
        - bundleLosses
        - bundleLosses
        preAllocatedCPU: 9.369310271410669
        numProducers: 2
        underLoaded: true
        protocols:
          key: protocols
        systemResourceUsage:
          bandwidthIn:
            usage: 6.027456183070403
            limit: 1.4658129805029452
        allocatedMemory: 7.457744773683766
        brokerVersionString: brokerVersionString
        timestamp: 0
        webServiceUrl: webServiceUrl
        msgRateIn: 6.027456183070403
        loadReportType: loadReportType
        webServiceUrlTls: webServiceUrlTls
        pulsarServiceUrl: pulsarServiceUrl
        numConsumers: 5
        msgThroughputIn: 1.284659006116532
        msgThroughputOut: 2.8841621266687802
        persistentTopicsEnabled: true
        preAllocatedMsgRateOut: 3.5571952270680973
        pulsarServiceUrlTls: pulsarServiceUrlTls
        allocatedMsgRateIn: 5.025004791520295
        allocatedBandwidthIn: 1.1730742509559433
        lastUpdate: 6
        name: name
        nonPersistentTopicsEnabled: true
        bundleGains:
        - bundleGains
        - bundleGains
        allocatedBandwidthOut: 4.965218492984954
        msgRateOut: 1.4658129805029452
        numBundles: 7
    LongRunningProcessStatus:
      type: object
      properties:
        status:
          type: string
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
        lastError:
          type: string
      example:
        lastError: lastError
        status: NOT_RUN
    LongSchemaVersion:
      type: object
      properties:
        version:
          type: integer
          format: int64
      example:
        version: 0
    MessageId:
      type: object
    MessageIdImpl:
      type: object
      properties:
        ledgerId:
          type: integer
          format: int64
        entryId:
          type: integer
          format: int64
        partitionIndex:
          type: integer
          format: int32
      example:
        ledgerId: 0
        partitionIndex: 1
        entryId: 6
    Metrics:
      type: object
      properties:
        metrics:
          type: object
          additionalProperties:
            type: object
            properties: {}
            example: {}
        dimensions:
          type: object
          additionalProperties:
            type: string
      example:
        metrics:
          key: {}
        dimensions:
          key: dimensions
    NamespaceBundleStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        consumerCount:
          type: integer
          format: int32
        producerCount:
          type: integer
          format: int32
        topics:
          type: integer
          format: int64
        cacheSize:
          type: integer
          format: int64
      example:
        msgRateIn: 9.301444243932576
        cacheSize: 1
        consumerCount: 7
        topics: 1
        producerCount: 1
        msgThroughputIn: 3.616076749251911
        msgThroughputOut: 4.145608029883936
        msgRateOut: 2.027123023002322
    NamespaceIsolationData:
      type: object
      properties:
        namespaces:
          type: array
          description: The list of namespaces to apply this namespace isolation data
          items:
            type: string
        primary:
          type: array
          description: The list of secondary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
        auto_failover_policy:
          $ref: '#/components/schemas/AutoFailoverPolicyData'
      description: The data of namespace isolation configuration
      example:
        namespaces:
        - namespaces
        - namespaces
        primary:
        - primary
        - primary
        auto_failover_policy:
          policy_type: min_available
          parameters: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
    NamespaceOwnershipStatus:
      type: object
      properties:
        broker_assignment:
          type: string
          enum:
          - primary
          - secondary
          - shared
        is_controlled:
          type: boolean
        is_active:
          type: boolean
      example:
        is_active: true
        is_controlled: true
        broker_assignment: primary
    NonPersistentPublisherStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        averageMsgSize:
          type: number
          format: double
        producerId:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
        msgDropRate:
          type: number
          format: double
        address:
          type: string
        producerName:
          type: string
        connectedSince:
          type: string
        clientVersion:
          type: string
      example:
        msgRateIn: 7.386281948385884
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        msgDropRate: 6.84685269835264
        producerName: producerName
        averageMsgSize: 1.0246457001441578
        producerId: 1
        clientVersion: clientVersion
        msgThroughputIn: 1.2315135367772556
    NonPersistentReplicatorStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        msgRateExpired:
          type: number
          format: double
        replicationBacklog:
          type: integer
          format: int64
        connected:
          type: boolean
        replicationDelayInSeconds:
          type: integer
          format: int64
        inboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        outboundConnectedSince:
          type: string
        msgDropRate:
          type: number
          format: double
      example:
        msgRateIn: 0.10263654006109402
        replicationDelayInSeconds: 7
        msgRateExpired: 3.0205796992916243
        outboundConnectedSince: outboundConnectedSince
        outboundConnection: outboundConnection
        msgDropRate: 5.533258397034986
        msgThroughputIn: 4.652396432933246
        msgThroughputOut: 7.740351818741173
        connected: true
        inboundConnection: inboundConnection
        replicationBacklog: 3
        inboundConnectedSince: inboundConnectedSince
        msgRateOut: 8.969578798196912
    NonPersistentSubscriptionStats:
      type: object
      properties:
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        bytesOutCounter:
          type: integer
          format: int64
        msgOutCounter:
          type: integer
          format: int64
        msgRateRedeliver:
          type: number
          format: double
        msgBacklog:
          type: integer
          format: int64
        msgBacklogNoDelayed:
          type: integer
          format: int64
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          type: integer
          format: int64
        unackedMessages:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
        activeConsumerName:
          type: string
        msgRateExpired:
          type: number
          format: double
        lastExpireTimestamp:
          type: integer
          format: int64
        lastConsumedFlowTimestamp:
          type: integer
          format: int64
        lastConsumedTimestamp:
          type: integer
          format: int64
        lastAckedTimestamp:
          type: integer
          format: int64
        consumers:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerStats'
        isReplicated:
          type: boolean
        msgDropRate:
          type: number
          format: double
      example:
        lastConsumedFlowTimestamp: 6
        activeConsumerName: activeConsumerName
        lastExpireTimestamp: 3
        msgRateExpired: 6.438423552598547
        msgDropRate: 6.519180951018382
        msgRateRedeliver: 9.965781217890562
        msgOutCounter: 5
        type: Exclusive
        msgThroughputOut: 1.1730742509559433
        bytesOutCounter: 4
        isReplicated: true
        lastAckedTimestamp: 2
        consumers:
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 3.353193347011243
          msgOutCounter: 6
          clientVersion: clientVersion
          msgThroughputOut: 6.878052220127876
          availablePermits: 3
          bytesOutCounter: 5
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 0
          unackedMessages: 7
          msgRateOut: 6.778324963048013
          consumerName: consumerName
          lastConsumedTimestamp: 7
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 3.353193347011243
          msgOutCounter: 6
          clientVersion: clientVersion
          msgThroughputOut: 6.878052220127876
          availablePermits: 3
          bytesOutCounter: 5
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 0
          unackedMessages: 7
          msgRateOut: 6.778324963048013
          consumerName: consumerName
          lastConsumedTimestamp: 7
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 8
        unackedMessages: 9
        msgBacklogNoDelayed: 6
        msgBacklog: 9
        msgRateOut: 7.457744773683766
        lastConsumedTimestamp: 1
    NonPersistentTopicStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        bytesInCounter:
          type: integer
          format: int64
        msgInCounter:
          type: integer
          format: int64
        bytesOutCounter:
          type: integer
          format: int64
        msgOutCounter:
          type: integer
          format: int64
        averageMsgSize:
          type: number
          format: double
        storageSize:
          type: integer
          format: int64
        backlogSize:
          type: integer
          format: int64
        publishers:
          type: array
          items:
            $ref: '#/components/schemas/NonPersistentPublisherStats'
        subscriptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentSubscriptionStats'
        replication:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentReplicatorStats'
        deduplicationStatus:
          type: string
        msgDropRate:
          type: number
          format: double
      example:
        msgRateIn: 0.8008281904610115
        replication:
          key:
            msgRateIn: 0.10263654006109402
            replicationDelayInSeconds: 7
            msgRateExpired: 3.0205796992916243
            outboundConnectedSince: outboundConnectedSince
            outboundConnection: outboundConnection
            msgDropRate: 5.533258397034986
            msgThroughputIn: 4.652396432933246
            msgThroughputOut: 7.740351818741173
            connected: true
            inboundConnection: inboundConnection
            replicationBacklog: 3
            inboundConnectedSince: inboundConnectedSince
            msgRateOut: 8.969578798196912
        subscriptions:
          key:
            lastConsumedFlowTimestamp: 6
            activeConsumerName: activeConsumerName
            lastExpireTimestamp: 3
            msgRateExpired: 6.438423552598547
            msgDropRate: 6.519180951018382
            msgRateRedeliver: 9.965781217890562
            msgOutCounter: 5
            type: Exclusive
            msgThroughputOut: 1.1730742509559433
            bytesOutCounter: 4
            isReplicated: true
            lastAckedTimestamp: 2
            consumers:
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 3.353193347011243
              msgOutCounter: 6
              clientVersion: clientVersion
              msgThroughputOut: 6.878052220127876
              availablePermits: 3
              bytesOutCounter: 5
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 0
              unackedMessages: 7
              msgRateOut: 6.778324963048013
              consumerName: consumerName
              lastConsumedTimestamp: 7
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 3.353193347011243
              msgOutCounter: 6
              clientVersion: clientVersion
              msgThroughputOut: 6.878052220127876
              availablePermits: 3
              bytesOutCounter: 5
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 0
              unackedMessages: 7
              msgRateOut: 6.778324963048013
              consumerName: consumerName
              lastConsumedTimestamp: 7
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 8
            unackedMessages: 9
            msgBacklogNoDelayed: 6
            msgBacklog: 9
            msgRateOut: 7.457744773683766
            lastConsumedTimestamp: 1
        msgDropRate: 3.2588565619047607
        msgOutCounter: 9
        backlogSize: 4
        msgThroughputIn: 6.027456183070403
        msgThroughputOut: 5.962133916683182
        bytesInCounter: 5
        bytesOutCounter: 7
        msgInCounter: 2
        storageSize: 2
        publishers:
        - msgRateIn: 7.386281948385884
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgDropRate: 6.84685269835264
          producerName: producerName
          averageMsgSize: 1.0246457001441578
          producerId: 1
          clientVersion: clientVersion
          msgThroughputIn: 1.2315135367772556
        - msgRateIn: 7.386281948385884
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgDropRate: 6.84685269835264
          producerName: producerName
          averageMsgSize: 1.0246457001441578
          producerId: 1
          clientVersion: clientVersion
          msgThroughputIn: 1.2315135367772556
        averageMsgSize: 3.616076749251911
        deduplicationStatus: deduplicationStatus
        msgRateOut: 1.4658129805029452
    OffloadPolicies:
      type: object
      properties:
        offloadersDirectory:
          type: string
        managedLedgerOffloadDriver:
          type: string
        managedLedgerOffloadMaxThreads:
          type: integer
          format: int32
        managedLedgerOffloadPrefetchRounds:
          type: integer
          format: int32
        managedLedgerOffloadThresholdInBytes:
          type: integer
          format: int64
        managedLedgerOffloadDeletionLagInMillis:
          type: integer
          format: int64
        s3ManagedLedgerOffloadRegion:
          type: string
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        s3Driver:
          type: boolean
        gcsDriver:
          type: boolean
        fileSystemDriver:
          type: boolean
      example:
        fileSystemDriver: true
        fileSystemURI: fileSystemURI
        managedLedgerOffloadThresholdInBytes: 6
        gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
        fileSystemProfilePath: fileSystemProfilePath
        s3ManagedLedgerOffloadMaxBlockSizeInBytes: 2
        s3ManagedLedgerOffloadReadBufferSizeInBytes: 6
        managedLedgerOffloadMaxThreads: 6
        gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
        offloadersDirectory: offloadersDirectory
        s3Driver: true
        gcsManagedLedgerOffloadMaxBlockSizeInBytes: 6
        managedLedgerOffloadPrefetchRounds: 3
        gcsDriver: true
        s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
        gcsManagedLedgerOffloadReadBufferSizeInBytes: 5
        managedLedgerOffloadDeletionLagInMillis: 1
        s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
        s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
        managedLedgerOffloadDriver: managedLedgerOffloadDriver
        s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
        s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
        gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
    OffloadProcessStatus:
      type: object
      properties:
        status:
          type: string
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
        lastError:
          type: string
        firstUnoffloadedMessage:
          $ref: '#/components/schemas/MessageIdImpl'
      example:
        lastError: lastError
        firstUnoffloadedMessage:
          ledgerId: 0
          partitionIndex: 1
          entryId: 6
        status: NOT_RUN
    OutputStream:
      type: object
    PartitionedTopicMetadata:
      type: object
      properties:
        partitions:
          type: integer
          format: int32
      example:
        partitions: 0
    PendingBookieOpsStats:
      type: object
      properties:
        dataLedgerOpenOp:
          type: integer
          format: int64
        dataLedgerCloseOp:
          type: integer
          format: int64
        dataLedgerCreateOp:
          type: integer
          format: int64
        dataLedgerDeleteOp:
          type: integer
          format: int64
        cursorLedgerOpenOp:
          type: integer
          format: int64
        cursorLedgerCloseOp:
          type: integer
          format: int64
        cursorLedgerCreateOp:
          type: integer
          format: int64
        cursorLedgerDeleteOp:
          type: integer
          format: int64
      example:
        cursorLedgerDeleteOp: 9
        cursorLedgerCreateOp: 7
        dataLedgerCreateOp: 1
        cursorLedgerOpenOp: 5
        dataLedgerOpenOp: 0
        dataLedgerCloseOp: 6
        dataLedgerDeleteOp: 5
        cursorLedgerCloseOp: 2
    PersistencePolicies:
      type: object
      properties:
        bookkeeperEnsemble:
          type: integer
          format: int32
        bookkeeperWriteQuorum:
          type: integer
          format: int32
        bookkeeperAckQuorum:
          type: integer
          format: int32
        managedLedgerMaxMarkDeleteRate:
          type: number
          format: double
      example:
        bookkeeperWriteQuorum: 3
        bookkeeperAckQuorum: 2
        bookkeeperEnsemble: 9
        managedLedgerMaxMarkDeleteRate: 4.145608029883936
    PersistentOfflineTopicStats:
      type: object
      properties:
        storageSize:
          type: integer
          format: int64
        totalMessages:
          type: integer
          format: int64
        messageBacklog:
          type: integer
          format: int64
        brokerName:
          type: string
        topicName:
          type: string
        dataLedgerDetails:
          type: array
          items:
            $ref: '#/components/schemas/LedgerDetails'
        cursorDetails:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CursorDetails'
        statGeneratedAt:
          type: string
          format: date-time
      example:
        dataLedgerDetails:
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        messageBacklog: 1
        statGeneratedAt: 2000-01-23T04:56:07.000+00:00
        storageSize: 0
        totalMessages: 6
        topicName: topicName
        cursorDetails:
          key:
            cursorLedgerId: 3
            cursorBacklog: 9
        brokerName: brokerName
    PersistentTopicInternalStats:
      type: object
      properties:
        entriesAddedCounter:
          type: integer
          format: int64
        numberOfEntries:
          type: integer
          format: int64
        totalSize:
          type: integer
          format: int64
        currentLedgerEntries:
          type: integer
          format: int64
        currentLedgerSize:
          type: integer
          format: int64
        lastLedgerCreatedTimestamp:
          type: string
        lastLedgerCreationFailureTimestamp:
          type: string
        waitingCursorsCount:
          type: integer
          format: int32
        pendingAddEntriesCount:
          type: integer
          format: int32
        lastConfirmedEntry:
          type: string
        state:
          type: string
        ledgers:
          type: array
          items:
            $ref: '#/components/schemas/LedgerInfo'
        cursors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CursorStats'
      example:
        numberOfEntries: 6
        currentLedgerSize: 5
        ledgers:
        - ledgerId: 9
          offloaded: true
          entries: 3
          size: 2
        - ledgerId: 9
          offloaded: true
          entries: 3
          size: 2
        lastLedgerCreationFailureTimestamp: lastLedgerCreationFailureTimestamp
        currentLedgerEntries: 5
        cursors:
          key:
            numberOfEntriesSinceFirstNotAckedMessage: 1
            markDeletePosition: markDeletePosition
            cursorLedgerLastEntry: 1
            pendingReadOps: 4
            totalNonContiguousDeletedMessagesRange: 6
            lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
            readPosition: readPosition
            individuallyDeletedMessages: individuallyDeletedMessages
            waitingReadOp: true
            messagesConsumedCounter: 7
            state: state
            cursorLedger: 1
            properties:
              key: 7
        totalSize: 1
        lastLedgerCreatedTimestamp: lastLedgerCreatedTimestamp
        lastConfirmedEntry: lastConfirmedEntry
        entriesAddedCounter: 0
        state: state
        waitingCursorsCount: 2
        pendingAddEntriesCount: 7
    Policies:
      type: object
      properties:
        auth_policies:
          $ref: '#/components/schemas/AuthPolicies'
        replication_clusters:
          uniqueItems: true
          type: array
          items:
            type: string
        bundles:
          $ref: '#/components/schemas/BundlesData'
        backlog_quota_map:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BacklogQuota'
        clusterDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
        topicDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
        subscriptionDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
        replicatorDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
        clusterSubscribeRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscribeRate'
        persistence:
          $ref: '#/components/schemas/PersistencePolicies'
        deduplicationEnabled:
          type: boolean
        autoTopicCreationOverride:
          $ref: '#/components/schemas/AutoTopicCreationOverride'
        publishMaxMessageRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PublishRate'
        latency_stats_sample_rate:
          type: object
          additionalProperties:
            type: integer
            format: int32
        message_ttl_in_seconds:
          type: integer
          format: int32
        retention_policies:
          $ref: '#/components/schemas/RetentionPolicies'
        deleted:
          type: boolean
        antiAffinityGroup:
          type: string
        encryption_required:
          type: boolean
        delayed_delivery_policies:
          $ref: '#/components/schemas/DelayedDeliveryPolicies'
        subscription_auth_mode:
          type: string
          enum:
          - None
          - Prefix
        max_producers_per_topic:
          type: integer
          format: int32
        max_consumers_per_topic:
          type: integer
          format: int32
        max_consumers_per_subscription:
          type: integer
          format: int32
        compaction_threshold:
          type: integer
          format: int64
        offload_threshold:
          type: integer
          format: int64
        offload_deletion_lag_ms:
          type: integer
          format: int64
        schema_auto_update_compatibility_strategy:
          type: string
          enum:
          - AutoUpdateDisabled
          - Backward
          - Forward
          - Full
          - AlwaysCompatible
          - BackwardTransitive
          - ForwardTransitive
          - FullTransitive
        schema_compatibility_strategy:
          type: string
          enum:
          - UNDEFINED
          - ALWAYS_INCOMPATIBLE
          - ALWAYS_COMPATIBLE
          - BACKWARD
          - FORWARD
          - FULL
          - BACKWARD_TRANSITIVE
          - FORWARD_TRANSITIVE
          - FULL_TRANSITIVE
        is_allow_auto_update_schema:
          type: boolean
        schema_validation_enforced:
          type: boolean
        offload_policies:
          $ref: '#/components/schemas/OffloadPolicies'
      example:
        backlog_quota_map:
          key:
            limit: 6
            policy: producer_request_hold
        message_ttl_in_seconds: 6
        clusterSubscribeRate:
          key:
            ratePeriodInSecond: 7
            subscribeThrottlingRatePerConsumer: 2
        max_consumers_per_topic: 9
        autoTopicCreationOverride:
          defaultNumPartitions: 7
          allowAutoTopicCreation: true
          topicType: topicType
        replicatorDispatchRate: {}
        publishMaxMessageRate:
          key:
            publishThrottlingRateInMsg: 1
            publishThrottlingRateInByte: 1
        auth_policies:
          subscription_auth_roles:
            key:
            - subscription_auth_roles
            - subscription_auth_roles
          namespace_auth:
            key:
            - produce
            - produce
          destination_auth:
            key:
              key:
              - produce
              - produce
        subscription_auth_mode: None
        max_consumers_per_subscription: 9
        is_allow_auto_update_schema: true
        antiAffinityGroup: antiAffinityGroup
        max_producers_per_topic: 5
        schema_auto_update_compatibility_strategy: AutoUpdateDisabled
        latency_stats_sample_rate:
          key: 1
        schema_validation_enforced: true
        offload_policies:
          fileSystemDriver: true
          fileSystemURI: fileSystemURI
          managedLedgerOffloadThresholdInBytes: 6
          gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
          fileSystemProfilePath: fileSystemProfilePath
          s3ManagedLedgerOffloadMaxBlockSizeInBytes: 2
          s3ManagedLedgerOffloadReadBufferSizeInBytes: 6
          managedLedgerOffloadMaxThreads: 6
          gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
          offloadersDirectory: offloadersDirectory
          s3Driver: true
          gcsManagedLedgerOffloadMaxBlockSizeInBytes: 6
          managedLedgerOffloadPrefetchRounds: 3
          gcsDriver: true
          s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
          gcsManagedLedgerOffloadReadBufferSizeInBytes: 5
          managedLedgerOffloadDeletionLagInMillis: 1
          s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
          s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
          managedLedgerOffloadDriver: managedLedgerOffloadDriver
          s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
          s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
          gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
        offload_threshold: 8
        compaction_threshold: 6
        subscriptionDispatchRate: {}
        clusterDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 1
            relativeToPublishRate: true
            ratePeriodInSecond: 5
            dispatchThrottlingRateInByte: 5
        schema_compatibility_strategy: UNDEFINED
        deduplicationEnabled: true
        encryption_required: true
        replication_clusters:
        - replication_clusters
        - replication_clusters
        retention_policies:
          retentionSizeInMB: 1
          retentionTimeInMinutes: 7
        offload_deletion_lag_ms: 9
        topicDispatchRate: {}
        deleted: true
        bundles:
          boundaries:
          - boundaries
          - boundaries
          numBundles: 0
        persistence:
          bookkeeperWriteQuorum: 3
          bookkeeperAckQuorum: 2
          bookkeeperEnsemble: 9
          managedLedgerMaxMarkDeleteRate: 4.145608029883936
        delayed_delivery_policies:
          tickTime: 4
          active: true
    PoolArenaStats:
      type: object
      properties:
        numTinySubpages:
          type: integer
          format: int32
        numSmallSubpages:
          type: integer
          format: int32
        numChunkLists:
          type: integer
          format: int32
        tinySubpages:
          type: array
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
        smallSubpages:
          type: array
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
        chunkLists:
          type: array
          items:
            $ref: '#/components/schemas/PoolChunkListStats'
        numAllocations:
          type: integer
          format: int64
        numTinyAllocations:
          type: integer
          format: int64
        numSmallAllocations:
          type: integer
          format: int64
        numNormalAllocations:
          type: integer
          format: int64
        numHugeAllocations:
          type: integer
          format: int64
        numDeallocations:
          type: integer
          format: int64
        numTinyDeallocations:
          type: integer
          format: int64
        numSmallDeallocations:
          type: integer
          format: int64
        numNormalDeallocations:
          type: integer
          format: int64
        numHugeDeallocations:
          type: integer
          format: int64
        numActiveAllocations:
          type: integer
          format: int64
        numActiveTinyAllocations:
          type: integer
          format: int64
        numActiveSmallAllocations:
          type: integer
          format: int64
        numActiveNormalAllocations:
          type: integer
          format: int64
        numActiveHugeAllocations:
          type: integer
          format: int64
      example:
        numActiveNormalAllocations: 6
        numDeallocations: 8
        tinySubpages:
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        smallSubpages:
        - null
        - null
        numActiveTinyAllocations: 2
        numActiveAllocations: 1
        chunkLists:
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        numHugeDeallocations: 6
        numActiveSmallAllocations: 6
        numAllocations: 4
        numTinySubpages: 7
        numSmallAllocations: 9
        numTinyDeallocations: 9
        numTinyAllocations: 5
        numNormalDeallocations: 3
        numActiveHugeAllocations: 5
        numNormalAllocations: 9
        numSmallSubpages: 9
        numHugeAllocations: 6
        numChunkLists: 3
        numSmallDeallocations: 6
    PoolChunkListStats:
      type: object
      properties:
        minUsage:
          type: integer
          format: int32
        maxUsage:
          type: integer
          format: int32
        chunks:
          type: array
          items:
            $ref: '#/components/schemas/PoolChunkStats'
      example:
        chunks:
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        minUsage: 1
        maxUsage: 1
    PoolChunkStats:
      type: object
      properties:
        usage:
          type: integer
          format: int32
        chunkSize:
          type: integer
          format: int32
        freeBytes:
          type: integer
          format: int32
      example:
        chunkSize: 7
        usage: 6
        freeBytes: 1
    PoolSubpageStats:
      type: object
      properties:
        maxNumElements:
          type: integer
          format: int32
        numAvailable:
          type: integer
          format: int32
        elementSize:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
      example:
        numAvailable: 4
        elementSize: 7
        pageSize: 1
        maxNumElements: 2
    PostSchemaPayload:
      type: object
      properties:
        type:
          type: string
        schema:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    PostSchemaResponse:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/SchemaVersion'
      example:
        version: {}
    PublishRate:
      type: object
      properties:
        publishThrottlingRateInMsg:
          type: integer
          format: int32
        publishThrottlingRateInByte:
          type: integer
          format: int64
      example:
        publishThrottlingRateInMsg: 1
        publishThrottlingRateInByte: 1
    PublisherStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        averageMsgSize:
          type: number
          format: double
        producerId:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
        address:
          type: string
        producerName:
          type: string
        connectedSince:
          type: string
        clientVersion:
          type: string
      example:
        msgRateIn: 7.386281948385884
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        producerName: producerName
        averageMsgSize: 1.0246457001441578
        producerId: 1
        clientVersion: clientVersion
        msgThroughputIn: 1.2315135367772556
    ReplicatorStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        msgRateExpired:
          type: number
          format: double
        replicationBacklog:
          type: integer
          format: int64
        connected:
          type: boolean
        replicationDelayInSeconds:
          type: integer
          format: int64
        inboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        outboundConnectedSince:
          type: string
      example:
        msgRateIn: 2.8841621266687802
        connected: true
        replicationDelayInSeconds: 3
        inboundConnection: inboundConnection
        msgRateExpired: 6.704019297950036
        replicationBacklog: 3
        outboundConnectedSince: outboundConnectedSince
        outboundConnection: outboundConnection
        inboundConnectedSince: inboundConnectedSince
        msgThroughputIn: 6.778324963048013
        msgThroughputOut: 5.944895607614016
        msgRateOut: 6.878052220127876
    ResourceDescription:
      type: object
      properties:
        usagePct:
          type: integer
          format: int32
        resourceUsage:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceUsage'
      example:
        resourceUsage:
          key:
            usage: 6.027456183070403
            limit: 1.4658129805029452
        usagePct: 0
    ResourceQuota:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        bandwidthIn:
          type: number
          format: double
        bandwidthOut:
          type: number
          format: double
        memory:
          type: number
          format: double
        dynamic:
          type: boolean
      example:
        msgRateIn: 0.8008281904610115
        bandwidthIn: 1.4658129805029452
        memory: 5.637376656633329
        bandwidthOut: 5.962133916683182
        dynamic: true
        msgRateOut: 6.027456183070403
    ResourceUnit:
      type: object
      properties:
        availableResource:
          $ref: '#/components/schemas/ResourceDescription'
        resourceId:
          type: string
      example:
        resourceId: resourceId
        availableResource:
          resourceUsage:
            key:
              usage: 6.027456183070403
              limit: 1.4658129805029452
          usagePct: 0
    ResourceUsage:
      type: object
      properties:
        usage:
          type: number
          format: double
        limit:
          type: number
          format: double
      example:
        usage: 6.027456183070403
        limit: 1.4658129805029452
    RetentionPolicies:
      type: object
      properties:
        retentionTimeInMinutes:
          type: integer
          format: int32
        retentionSizeInMB:
          type: integer
          format: int64
      example:
        retentionSizeInMB: 1
        retentionTimeInMinutes: 7
    SchemaVersion:
      type: object
    SubscribeRate:
      type: object
      properties:
        subscribeThrottlingRatePerConsumer:
          type: integer
          format: int32
        ratePeriodInSecond:
          type: integer
          format: int32
      example:
        ratePeriodInSecond: 7
        subscribeThrottlingRatePerConsumer: 2
    SubscriptionStats:
      type: object
      properties:
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        bytesOutCounter:
          type: integer
          format: int64
        msgOutCounter:
          type: integer
          format: int64
        msgRateRedeliver:
          type: number
          format: double
        msgBacklog:
          type: integer
          format: int64
        msgBacklogNoDelayed:
          type: integer
          format: int64
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          type: integer
          format: int64
        unackedMessages:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
        activeConsumerName:
          type: string
        msgRateExpired:
          type: number
          format: double
        lastExpireTimestamp:
          type: integer
          format: int64
        lastConsumedFlowTimestamp:
          type: integer
          format: int64
        lastConsumedTimestamp:
          type: integer
          format: int64
        lastAckedTimestamp:
          type: integer
          format: int64
        consumers:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerStats'
        isReplicated:
          type: boolean
      example:
        lastConsumedFlowTimestamp: 3
        activeConsumerName: activeConsumerName
        lastExpireTimestamp: 6
        msgRateExpired: 9.018348186070783
        msgRateRedeliver: 5.025004791520295
        msgOutCounter: 4
        type: Exclusive
        msgThroughputOut: 7.457744773683766
        bytesOutCounter: 1
        isReplicated: true
        lastAckedTimestamp: 1
        consumers:
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 3.353193347011243
          msgOutCounter: 6
          clientVersion: clientVersion
          msgThroughputOut: 6.878052220127876
          availablePermits: 3
          bytesOutCounter: 5
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 0
          unackedMessages: 7
          msgRateOut: 6.778324963048013
          consumerName: consumerName
          lastConsumedTimestamp: 7
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 3.353193347011243
          msgOutCounter: 6
          clientVersion: clientVersion
          msgThroughputOut: 6.878052220127876
          availablePermits: 3
          bytesOutCounter: 5
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 0
          unackedMessages: 7
          msgRateOut: 6.778324963048013
          consumerName: consumerName
          lastConsumedTimestamp: 7
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 6
        unackedMessages: 8
        msgBacklogNoDelayed: 9
        msgBacklog: 9
        msgRateOut: 6.84685269835264
        lastConsumedTimestamp: 6
    SystemResourceUsage:
      type: object
      properties:
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
      example:
        bandwidthIn:
          usage: 6.027456183070403
          limit: 1.4658129805029452
    TenantInfo:
      type: object
      properties:
        adminRoles:
          uniqueItems: true
          type: array
          description: Comma separated list of auth principal allowed to administrate
            the tenant.
          items:
            type: string
        allowedClusters:
          uniqueItems: true
          type: array
          description: Comma separated allowed clusters.
          items:
            type: string
      description: Information of adminRoles and allowedClusters for tenant
      example:
        adminRoles:
        - adminRoles
        - adminRoles
        allowedClusters:
        - allowedClusters
        - allowedClusters
    TopicStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        bytesInCounter:
          type: integer
          format: int64
        msgInCounter:
          type: integer
          format: int64
        bytesOutCounter:
          type: integer
          format: int64
        msgOutCounter:
          type: integer
          format: int64
        averageMsgSize:
          type: number
          format: double
        storageSize:
          type: integer
          format: int64
        backlogSize:
          type: integer
          format: int64
        publishers:
          type: array
          items:
            $ref: '#/components/schemas/PublisherStats'
        subscriptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionStats'
        replication:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ReplicatorStats'
        deduplicationStatus:
          type: string
      example:
        msgRateIn: 0.8008281904610115
        replication:
          key:
            msgRateIn: 2.8841621266687802
            connected: true
            replicationDelayInSeconds: 3
            inboundConnection: inboundConnection
            msgRateExpired: 6.704019297950036
            replicationBacklog: 3
            outboundConnectedSince: outboundConnectedSince
            outboundConnection: outboundConnection
            inboundConnectedSince: inboundConnectedSince
            msgThroughputIn: 6.778324963048013
            msgThroughputOut: 5.944895607614016
            msgRateOut: 6.878052220127876
        subscriptions:
          key:
            lastConsumedFlowTimestamp: 3
            activeConsumerName: activeConsumerName
            lastExpireTimestamp: 6
            msgRateExpired: 9.018348186070783
            msgRateRedeliver: 5.025004791520295
            msgOutCounter: 4
            type: Exclusive
            msgThroughputOut: 7.457744773683766
            bytesOutCounter: 1
            isReplicated: true
            lastAckedTimestamp: 1
            consumers:
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 3.353193347011243
              msgOutCounter: 6
              clientVersion: clientVersion
              msgThroughputOut: 6.878052220127876
              availablePermits: 3
              bytesOutCounter: 5
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 0
              unackedMessages: 7
              msgRateOut: 6.778324963048013
              consumerName: consumerName
              lastConsumedTimestamp: 7
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 3.353193347011243
              msgOutCounter: 6
              clientVersion: clientVersion
              msgThroughputOut: 6.878052220127876
              availablePermits: 3
              bytesOutCounter: 5
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 0
              unackedMessages: 7
              msgRateOut: 6.778324963048013
              consumerName: consumerName
              lastConsumedTimestamp: 7
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 6
            unackedMessages: 8
            msgBacklogNoDelayed: 9
            msgBacklog: 9
            msgRateOut: 6.84685269835264
            lastConsumedTimestamp: 6
        msgOutCounter: 9
        backlogSize: 4
        msgThroughputIn: 6.027456183070403
        msgThroughputOut: 5.962133916683182
        bytesInCounter: 5
        bytesOutCounter: 7
        msgInCounter: 2
        storageSize: 2
        publishers:
        - msgRateIn: 7.386281948385884
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 1.0246457001441578
          producerId: 1
          clientVersion: clientVersion
          msgThroughputIn: 1.2315135367772556
        - msgRateIn: 7.386281948385884
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 1.0246457001441578
          producerId: 1
          clientVersion: clientVersion
          msgThroughputIn: 1.2315135367772556
        averageMsgSize: 3.616076749251911
        deduplicationStatus: deduplicationStatus
        msgRateOut: 1.4658129805029452
